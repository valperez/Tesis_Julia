razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social <- melt(razon_social)
ggplot(razon_social, aes(x = DIVISION, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social <- melt(razon_social)
ggplot(razon_social, aes(x = DIVISION, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
View(razon_social)
dias_promedio2 <- melt(dias_promedio)
ggplot(dias_promedio2, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_color_manual("Dias promedio", values = c("Salario Topado" = "#222D39",
"Salario No Topado" = "#D1713B"))
labs(x = "División de trabajo",
y = "Días de incapacidad")
?geom_text
dias_promedio2 <- melt(dias_promedio)
ggplot(dias_promedio2, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_color_manual("Dias promedio", values = c("Salario Topado" = "#222D39",
"Salario No Topado" = "#D1713B")) +
labs(x = "División de trabajo",
y = "Días de incapacidad",
fill = "Días promedio")
dias_promedio2 <- melt(dias_promedio)
ggplot(dias_promedio2, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_fill_discrete(name="Dias promedio",
labels=c("Salario No Topado", "Salario Topado"))  +
labs(x = "División de trabajo",
y = "Días de incapacidad")
?facet_wrap
View(dias_promedio)
dias_promedio <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
colnames(dias_promedio) <- c("División", "Grupo",
"Días Promedio(Salario No Topado)",
"Días Promedio(Salario Topado)")
?show
show(dias_promedio)
library(knitr)
kable(dias_promedio, caption = "Días promedio")
t.test(x = dias_promedio$`Días Promedio(Salario Topado)`,
y = dias_promedio$`Días Promedio(Salario No Topado)`,
alternative = "greater", conf.level = 0.95 )
comercio <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
filter(str_detect(DIVISION, "COMERCIO")) %>%
group_by(IS_SALARIO_TOPADO, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
comercio <- melt(comercio)
ggplot(comercio, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~GRUPO, ncol = 3, scales = "free") +
scale_fill_discrete(name="Dias promedio",
labels=c("Salario No Topado", "Salario Topado"))  +
labs(x = "División de trabajo",
y = "Días de incapacidad")
View(razon_social)
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social2 <- melt(razon_social)
ggplot(razon_social2, aes(x = RAZON_SOCIAL, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_fill_discrete(name="Dias promedio",
labels=c("Salario No Topado", "Salario Topado"))  +
labs(x = "División de trabajo", y = "Días de incapacidad")
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
x <- 8r
x = 8r
help(args)
args(lm)
help(lm)
install.packages('tinytex')
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
setwd("~/ITAM/Tesis/Julia con R/Code/Censo/Resultados_Julia")
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read.csv)
n = length(temp)
for (i in 1:n){
temp[i] <- str_replace(temp[i], ".csv", "")
}
library(dplyr)
library(stringr)
n = length(temp)
for (i in 1:n){
temp[i] <- str_replace(temp[i], ".csv", "")
}
n = length(myfiles)
for (i in 1:n){
assign(temp[i], myfiles[[i]])
}
for (i in (n/2 + 1):n){
aux <- get(temp[i])
aux <- aux %>%
select(Name, `Coef.`) %>%
rename(Julia = `Coef.`)
assign(temp[i], aux)
}
#Función para unir los resultados de R con los de Julia
union_resultados <- function(vec_strings, fm){
for (i in 1:(k/2)){
aux <- get(vec_strings[i])
ajuste <- lm(fm, aux)
coeficientes <- ajuste$coefficients
res_aux <- get(vec_strings[(k/2) + i])
res_aux <- res_aux %>%
mutate(R = coeficientes)
return (res_aux)
}
}
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
fm_6 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA))
fit6_strings <- temp[str_detect(temp, "fit6")]
k <- length(fit6_strings)
for (i in (k/2 +1):k){
assign(fit6_strings[i], union_resultados(fit6_strings, fm_6))
}
fm_7 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET))
fit7_strings <- temp[str_detect(temp, "fit7")]
k <- length(fit7_strings)
for (i in (k/2 +1):k){
assign(fit7_strings[i], union_resultados(fit7_strings, fm_7))
}
fm_8 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO))
fit8_strings <- temp[str_detect(temp, "fit8")]
k <- length(fit8_strings)
for (i in (k/2 +1):k){
assign(fit8_strings[i], union_resultados(fit8_strings, fm_8))
}
fm_9 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) + as.factor(VACACIONES))
fit9_strings <- temp[str_detect(temp, "fit9")]
k <- length(fit9_strings)
for (i in (k/2 +1):k){
assign(fit9_strings[i], union_resultados(fit9_strings, fm_9))
}
fm_10 = formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) +
as.factor(VACACIONES) + as.factor(SERVICIO_MEDICO))
fit10_strings <- temp[str_detect(temp, "fit10")]
k <- length(fit10_strings)
for (i in (k/2 +1):k){
assign(fit10_strings[i], union_resultados(fit10_strings, fm_10))
}
View(res_5mil_fit6)
View(res_500_fit10)
View(res_500_fit5)
View(res_500_fit6)
View(res_500_fit7)
View(res_500_fit8)
View(res_500_fit9)
View(res_500mil_fit10)
View(res_500mil_fit5)
View(res_500mil_fit6)
View(res_500mil_fit7)
View(res_500mil_fit8)
View(res_500mil_fit9)
View(res_50mil_fit10)
View(res_50mil_fit5)
View(res_50mil_fit6)
View(res_50mil_fit7)
View(res_50mil_fit8)
View(res_50mil_fit9)
View(res_5mil_fit10)
View(res_5mil_fit5)
View(res_5mil_fit6)
View(res_5mil_fit7)
View(res_5mil_fit8)
View(res_5mil_fit9)
View(res_5mil_fit6)
library(knitr)
kable(res_500_fit5, caption = "Fit 5, n = 500")
kable(res_500_fit5, caption = "Fit 5, 500 observaciones")
kable(res_500mil_fit6, caption = "Fit 5, 500 observaciones")
kable(res_500mil_fit6, caption = "Fit 6, 500 mil observaciones")
kable(res_5mil_fit7, caption = "Fit 7, 5 mil observaciones")
kable(res_500mil_fit8, caption = "Fit 8, 500 mil observaciones")
kable(res_50mil_fit9, caption = "Fit 9, 50 mil observaciones")
kable(res_500_fit10, caption = "Fit 10, 500 observaciones")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(knitr)
setwd("~/ITAM/Tesis/Julia con R/Code/Censo/Resultados_Julia")
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read.csv)
n = length(temp)
for (i in 1:n){
temp[i] <- str_replace(temp[i], ".csv", "")
}
n = length(myfiles)
for (i in 1:n){
assign(temp[i], myfiles[[i]])
}
for (i in (n/2 + 1):n){
aux <- get(temp[i])
aux <- aux %>%
select(Name, `Coef.`) %>%
rename(Julia = `Coef.`)
assign(temp[i], aux)
}
#Función para unir los resultados de R con los de Julia
union_resultados <- function(vec_strings, fm){
for (i in 1:(k/2)){
aux <- get(vec_strings[i])
ajuste <- lm(fm, aux)
coeficientes <- ajuste$coefficients
res_aux <- get(vec_strings[(k/2) + i])
res_aux <- res_aux %>%
mutate(R = coeficientes)
return (res_aux)
}
}
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
kable(res_500_fit5, caption = "Fit 5, 500 observaciones")
fm_6 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA))
fit6_strings <- temp[str_detect(temp, "fit6")]
k <- length(fit6_strings)
for (i in (k/2 +1):k){
assign(fit6_strings[i], union_resultados(fit6_strings, fm_6))
}
kable(res_500mil_fit6, caption = "Fit 6, 500 mil observaciones")
fm_7 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET))
fit7_strings <- temp[str_detect(temp, "fit7")]
k <- length(fit7_strings)
for (i in (k/2 +1):k){
assign(fit7_strings[i], union_resultados(fit7_strings, fm_7))
}
kable(res_5mil_fit7, caption = "Fit 7, 5 mil observaciones")
fm_8 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO))
fit8_strings <- temp[str_detect(temp, "fit8")]
k <- length(fit8_strings)
for (i in (k/2 +1):k){
assign(fit8_strings[i], union_resultados(fit8_strings, fm_8))
}
kable(res_500mil_fit8, caption = "Fit 8, 500 mil observaciones")
fm_9 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) + as.factor(VACACIONES))
fit9_strings <- temp[str_detect(temp, "fit9")]
k <- length(fit9_strings)
for (i in (k/2 +1):k){
assign(fit9_strings[i], union_resultados(fit9_strings, fm_9))
}
kable(res_50mil_fit9, caption = "Fit 9, 50 mil observaciones")
fm_10 = formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) +
as.factor(VACACIONES) + as.factor(SERVICIO_MEDICO))
fit10_strings <- temp[str_detect(temp, "fit10")]
k <- length(fit10_strings)
for (i in (k/2 +1):k){
assign(fit10_strings[i], union_resultados(fit10_strings, fm_10))
}
kable(res_500_fit10, caption = "Fit 10, 500 observaciones")
nfac <- 5
models <- matrix(0, nMod, nfac)
nMod <- 3
nfac <- 5
models <- matrix(0, nMod, nfac)
View(models)
?matrix
fac_mod <- matrix(data = seq(1, 4), nrow = 2)
View(fac_mod)
fac_mod <- matrix(data = seq(1, 9), nrow = 3)
for (i in 1:nMod){
models[i, fac_mod[i,][fac_mod[i,] != 0]] <- 1
}
View(models)
nfac <- 3
models <- matrix(0, nMod, nfac)
fac_mod <- matrix(data = seq(1, 9), nrow = 3)
for (i in 1:nMod){
models[i, fac_mod[i,][fac_mod[i,] != 0]] <- 1
}
fac_mod <- matrix(data = seq(1, 9), nrow = 2)
for (i in 1:nMod){
models[i, fac_mod[i,][fac_mod[i,] != 0]] <- 1
}
fac_mod <- matrix(data = seq(1, 9), nrow = 3)
i = 1
models[i, fac_mod[i,][fac_mod[i,] != 0]]
fac_mod[i,]
View(fac_mod)
[fac_mod[i,]
[fac_mod[i,] != 0]
fac_mod[i,] != 0
fac_mod[i,][fac_mod[i,] != 0]
models[i, fac_mod[i,][fac_mod[i,] != 0]]
for (i in 1:nMod){
models [i , fac_mod[i , ] [fac_mod[ i , ] != 0 ] ] <- 1
}
fac_mod[i , ] [fac_mod[ i , ] != 0 ]
models [i , fac_mod[i , ] [fac_mod[ i , ] != 0 ] ]
fac_mod[i , ] [fac_mod[ i , ] != 0 ]
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4), nrow=5, dimnames=list(1:5, c( " f 1 " ," f 2 " , " f 3 " , " f 4 " ) )
)
)
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4"))
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
nrow=5,
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4")))
View(dimnames)
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
nrow=5,
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4")))
View(fac_mod)
?length
nMod <- 5
fac <- 5 - 1
models <- matrix(0, nMod, fac)
for (i in 1:nMod){
models[i, fac_mod[i, ]fac_mod[i, ] != 0] <- 1
}
for (i in 1:nMod){
models[i, fac_mod[i, ]fac_mod[i, ] != 0]] <- 1
}
for (i in 1:nMod){
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
}
View(models)
fac_mod[i, ][fac_mod[i, ] != 0]
models[i, fac_mod[i, ][fac_mod[i, ] != 0]]
i = 1
models <- matrix(0, nMod, fac)
View(fac_mod)
[fac_mod[i, ] != 0]
fac_mod[i, ] != 0
fac_mod[i, ][fac_mod[i, ] != 0]
models[i, fac_mod[i, ][fac_mod[i, ] != 0]]
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
View(models)
fac_mod <- matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
nrow=5,
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4")))
nMod <- 5
fac <- 5 - 1
models <- matrix(0, nMod, fac)
for (i in 1:nMod){
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
}
models <- matrix(0, nMod, fac)
i = 1
fac_mod[i, ][fac_mod[i, ] != 0]
models <- matrix(0, nMod, fac)
for (i in 1:nMod){
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
}
?combn
comb <- utils::combn(fac, 2)
View(comb)
View(models)
mat <- matrix(0, ncol  = ncol(comb), nrow = nrow(models))
View(mat)
j = 1
fac1 <- comb[1, j]
fac1
fac2 <- comb[2, j]
mat[which(models[, fac1] + models[, fac2] == 2), j] <- 1
models[, fac1]
models[, fac2]
models[, fac1] + models[, fac2] == 2
?data
data(BM93e3)
data("BM93e3")
install.packages("remotes")
remotes::install_github("ana-vela7/BsMD2")
data("BM93e3")
library(BsMD2)
data(BM93e3)
force(BM93e3)
View(BM93e3)
add_column(BM93e3, "Ensayos" = seq(1:20), .before = "blk")
library(tibble)
add_column(BM93e3, "Ensayos" = seq(1:20), .before = "blk")
BMN93e3 <- add_column(BM93e3, "Ensayos" = seq(1:20), .before = "blk")
BM93e3 <- add_column(BM93e3, "Ensayos" = seq(1:20), .before = "blk")
remove(BMN93e3)
setwd("~/ITAM/Tesis/Julia con R/Code/MD-optimality")
write.csv(BM93e3, "BM93e3.csv", row.names = FALSE)
View(BM93e3)
data(BM93e3)
X <- as.matrix(BM93e3[1:16,c(1,2,4,6,9)])
View(X)
View(BM93e3)
write.csv(BM93e3, "BM93e3.csv", row.names = FALSE)
X <- as.matrix(BM93e3[1:16,c(1,2,4,6,9)]) #matriz de diseÃ±o inicial
y <- as.vector(BM93e3[1:16,10]) #vector de respuesta
p_mod <- c(0.2356,0.2356,0.2356,0.2356,0.0566) #probabilidad posterior de los 5 modelos
fac_mod <- matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),nrow=5,
dimnames=list(1:5,c("f1","f2","f3","f4")))
Xcand <- matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,
-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,
-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,
-1,1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,1,-1),
nrow=16,dimnames=list(1:16,c("blk","f1","f2","f3","f4"))
)
View(fac_mod)
View(Xcand)
View(Xcand)
fac_mod <- matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
nrow=5,
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4")))
nMod <- 5
fac <- 5 - 1
models <- matrix(0, nMod, fac)
for (i in 1:nMod){
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
}
View(models)
fac_mod[i, ]
i = 1
fac_mod[i, ]
[fac_mod[i, ] != 0]
fac_mod[i, ] != 0
fac_mod[i, ][fac_mod[i, ] != 0]
TRUE*TRUE
fac_mod[i, ][fac_mod[i, ] != 0]
fac_mod[i, ][fac_mod[i, ] != 0]
[fac_mod[i, ] != 0]
fac_mod[i, ] != 0
fac_mod[i, ][fac_mod[i, ] != 0]
