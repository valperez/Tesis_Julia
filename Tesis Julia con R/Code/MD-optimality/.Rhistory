View(res_5mil_fit6)
View(res_5mil_fit7)
View(res_5mil_fit8)
View(res_5mil_fit9)
View(res_5mil_fit6)
library(knitr)
kable(res_500_fit5, caption = "Fit 5, n = 500")
kable(res_500_fit5, caption = "Fit 5, 500 observaciones")
kable(res_500mil_fit6, caption = "Fit 5, 500 observaciones")
kable(res_500mil_fit6, caption = "Fit 6, 500 mil observaciones")
kable(res_5mil_fit7, caption = "Fit 7, 5 mil observaciones")
kable(res_500mil_fit8, caption = "Fit 8, 500 mil observaciones")
kable(res_50mil_fit9, caption = "Fit 9, 50 mil observaciones")
kable(res_500_fit10, caption = "Fit 10, 500 observaciones")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(knitr)
setwd("~/ITAM/Tesis/Julia con R/Code/Censo/Resultados_Julia")
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read.csv)
n = length(temp)
for (i in 1:n){
temp[i] <- str_replace(temp[i], ".csv", "")
}
n = length(myfiles)
for (i in 1:n){
assign(temp[i], myfiles[[i]])
}
for (i in (n/2 + 1):n){
aux <- get(temp[i])
aux <- aux %>%
select(Name, `Coef.`) %>%
rename(Julia = `Coef.`)
assign(temp[i], aux)
}
#Función para unir los resultados de R con los de Julia
union_resultados <- function(vec_strings, fm){
for (i in 1:(k/2)){
aux <- get(vec_strings[i])
ajuste <- lm(fm, aux)
coeficientes <- ajuste$coefficients
res_aux <- get(vec_strings[(k/2) + i])
res_aux <- res_aux %>%
mutate(R = coeficientes)
return (res_aux)
}
}
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
kable(res_500_fit5, caption = "Fit 5, 500 observaciones")
fm_6 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA))
fit6_strings <- temp[str_detect(temp, "fit6")]
k <- length(fit6_strings)
for (i in (k/2 +1):k){
assign(fit6_strings[i], union_resultados(fit6_strings, fm_6))
}
kable(res_500mil_fit6, caption = "Fit 6, 500 mil observaciones")
fm_7 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET))
fit7_strings <- temp[str_detect(temp, "fit7")]
k <- length(fit7_strings)
for (i in (k/2 +1):k){
assign(fit7_strings[i], union_resultados(fit7_strings, fm_7))
}
kable(res_5mil_fit7, caption = "Fit 7, 5 mil observaciones")
fm_8 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO))
fit8_strings <- temp[str_detect(temp, "fit8")]
k <- length(fit8_strings)
for (i in (k/2 +1):k){
assign(fit8_strings[i], union_resultados(fit8_strings, fm_8))
}
kable(res_500mil_fit8, caption = "Fit 8, 500 mil observaciones")
fm_9 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) + as.factor(VACACIONES))
fit9_strings <- temp[str_detect(temp, "fit9")]
k <- length(fit9_strings)
for (i in (k/2 +1):k){
assign(fit9_strings[i], union_resultados(fit9_strings, fm_9))
}
kable(res_50mil_fit9, caption = "Fit 9, 50 mil observaciones")
fm_10 = formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) +
as.factor(VACACIONES) + as.factor(SERVICIO_MEDICO))
fit10_strings <- temp[str_detect(temp, "fit10")]
k <- length(fit10_strings)
for (i in (k/2 +1):k){
assign(fit10_strings[i], union_resultados(fit10_strings, fm_10))
}
kable(res_500_fit10, caption = "Fit 10, 500 observaciones")
nfac <- 5
models <- matrix(0, nMod, nfac)
nMod <- 3
nfac <- 5
models <- matrix(0, nMod, nfac)
View(models)
?matrix
fac_mod <- matrix(data = seq(1, 4), nrow = 2)
View(fac_mod)
fac_mod <- matrix(data = seq(1, 9), nrow = 3)
for (i in 1:nMod){
models[i, fac_mod[i,][fac_mod[i,] != 0]] <- 1
}
View(models)
nfac <- 3
models <- matrix(0, nMod, nfac)
fac_mod <- matrix(data = seq(1, 9), nrow = 3)
for (i in 1:nMod){
models[i, fac_mod[i,][fac_mod[i,] != 0]] <- 1
}
fac_mod <- matrix(data = seq(1, 9), nrow = 2)
for (i in 1:nMod){
models[i, fac_mod[i,][fac_mod[i,] != 0]] <- 1
}
fac_mod <- matrix(data = seq(1, 9), nrow = 3)
i = 1
models[i, fac_mod[i,][fac_mod[i,] != 0]]
fac_mod[i,]
View(fac_mod)
[fac_mod[i,]
[fac_mod[i,] != 0]
fac_mod[i,] != 0
fac_mod[i,][fac_mod[i,] != 0]
models[i, fac_mod[i,][fac_mod[i,] != 0]]
for (i in 1:nMod){
models [i , fac_mod[i , ] [fac_mod[ i , ] != 0 ] ] <- 1
}
fac_mod[i , ] [fac_mod[ i , ] != 0 ]
models [i , fac_mod[i , ] [fac_mod[ i , ] != 0 ] ]
fac_mod[i , ] [fac_mod[ i , ] != 0 ]
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4), nrow=5, dimnames=list(1:5, c( " f 1 " ," f 2 " , " f 3 " , " f 4 " ) )
)
)
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4"))
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
nrow=5,
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4")))
View(dimnames)
fac_mod <− matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
nrow=5,
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4")))
View(fac_mod)
?length
nMod <- 5
fac <- 5 - 1
models <- matrix(0, nMod, fac)
for (i in 1:nMod){
models[i, fac_mod[i, ]fac_mod[i, ] != 0] <- 1
}
for (i in 1:nMod){
models[i, fac_mod[i, ]fac_mod[i, ] != 0]] <- 1
}
for (i in 1:nMod){
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
}
View(models)
fac_mod[i, ][fac_mod[i, ] != 0]
models[i, fac_mod[i, ][fac_mod[i, ] != 0]]
i = 1
models <- matrix(0, nMod, fac)
View(fac_mod)
[fac_mod[i, ] != 0]
fac_mod[i, ] != 0
fac_mod[i, ][fac_mod[i, ] != 0]
models[i, fac_mod[i, ][fac_mod[i, ] != 0]]
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
View(models)
fac_mod <- matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),
nrow=5,
dimnames=list(1:5, c("f1" ,"f2" , "f3" , "f4")))
nMod <- 5
fac <- 5 - 1
models <- matrix(0, nMod, fac)
for (i in 1:nMod){
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
}
models <- matrix(0, nMod, fac)
i = 1
fac_mod[i, ][fac_mod[i, ] != 0]
models <- matrix(0, nMod, fac)
for (i in 1:nMod){
models[i, fac_mod[i, ][fac_mod[i, ] != 0]] <- 1
}
?combn
comb <- utils::combn(fac, 2)
View(comb)
View(models)
mat <- matrix(0, ncol  = ncol(comb), nrow = nrow(models))
View(mat)
j = 1
fac1 <- comb[1, j]
fac1
fac2 <- comb[2, j]
mat[which(models[, fac1] + models[, fac2] == 2), j] <- 1
models[, fac1]
models[, fac2]
models[, fac1] + models[, fac2] == 2
# # # R tesis Paty
library(BsMD2)
setwd("~/ITAM/Tesis/Julia con R/Code/MD-optimality")
X <- as.matrix(BM93e3[1:16,c(1,2,4,6,9)]) #matriz de diseÃ±o inicial
y <- as.vector(BM93e3[1:16,10]) #vector de respuesta
p_mod <- c(0.2356,0.2356,0.2356,0.2356,0.0566) #probabilidad posterior de los 5 modelos
fac_mod <- matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),nrow=5,
dimnames=list(1:5,c("f1","f2","f3","f4")))
Xcand <- matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,
-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,
-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,
-1,1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,1,-1),
nrow=16,dimnames=list(1:16,c("blk","f1","f2","f3","f4"))
)
t <- Sys.time()
e3_R <- BsMD2::MDopt(X = X, y = y, Xcand = Xcand,
nMod = 5, p_mod = p_mod, fac_mod = fac_mod,
nStart = 25)
Sys.time() - t
# # #  Julia con R
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/Valeria/AppData/Local/Programs/Julia-1.6.3/bin")
julia_source("MDopt.jl")
# Conversiones para los tipos de Julia
X_J <- as.data.frame(X)
julia_assign("X_J", X_J)
julia_assign("y_J", y)
julia_assign("p_mod_J", p_mod)
julia_assign("fac_mod_J", fac_mod)
julia_command("fac_mod_J = NamedArray(fac_mod_J)")
julia_eval("fac_mod_J = Int64.(fac_mod_J)")
julia_assign("Xcand_J", Xcand)
julia_command("Xcand_J = NamedArray(Xcand_J)")
julia_eval("Xcand_J = Int64.(Xcand_J)")
t_J <- Sys.time()
julia_eval("MDopt(X = X_J, y = y_J, Xcand = Xcand_J, nMod = 5,
p_mod = p_mod_J, fac_mod = fac_mod_J, nFDes = 4, max_int = 3, g = 2, Iter = 20, nStart = 10, top = 10)")
Sys.time() - t_J
# Python con R
library(reticulate)
source_python("MD_Python.py")
X_P <- as.data.frame(X)
Xcand_P <- as.data.frame(Xcand)
fac_mod_P <- as.data.frame(fac_mod)
X_P <- r_to_py(X_P)
y_P <- r_to_py(y)
Xcand_P <- r_to_py(Xcand_P)
p_mod_P <- r_to_py(p_mod)
fac_mod_P <- r_to_py(fac_mod_P)
nMod_P <- r_to_py(5L)
nFDes_P <- r_to_py(4L)
max_int_P <- r_to_py(3L)
g_P <- r_to_py(2L)
Iter_P <- r_to_py(20L)
nStart_P <- r_to_py(25L)
top_P <- r_to_py(10L)
t_P <- Sys.time()
MD_Python(X = X_P, y = y_P, Xcand = Xcand_P, nMod = nMod_P,
p_mod = p_mod_P, fac_mod = fac_mod_P,
nFDes = nFDes_P, max_int = max_int_P,
g = g_P, Iter = Iter_P, nStart = nStart_P, top = top_P)
Sys.time() - t_P
source_python("MD_Python.py")
# # # R tesis Paty
library(BsMD2)
setwd("~/ITAM/Tesis/Julia con R/Code/MD-optimality")
X <- as.matrix(BM93e3[1:16,c(1,2,4,6,9)]) #matriz de diseÃ±o inicial
y <- as.vector(BM93e3[1:16,10]) #vector de respuesta
p_mod <- c(0.2356,0.2356,0.2356,0.2356,0.0566) #probabilidad posterior de los 5 modelos
fac_mod <- matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),nrow=5,
dimnames=list(1:5,c("f1","f2","f3","f4")))
Xcand <- matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,
-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,
-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,
-1,1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,1,-1),
nrow=16,dimnames=list(1:16,c("blk","f1","f2","f3","f4"))
)
t <- Sys.time()
e3_R <- BsMD2::MDopt(X = X, y = y, Xcand = Xcand,
nMod = 5, p_mod = p_mod, fac_mod = fac_mod,
nStart = 25)
Sys.time() - t
# # #  Julia con R
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/Valeria/AppData/Local/Programs/Julia-1.6.3/bin")
julia_source("MDopt.jl")
# Conversiones para los tipos de Julia
X_J <- as.data.frame(X)
julia_assign("X_J", X_J)
julia_assign("y_J", y)
julia_assign("p_mod_J", p_mod)
julia_assign("fac_mod_J", fac_mod)
julia_command("fac_mod_J = NamedArray(fac_mod_J)")
julia_eval("fac_mod_J = Int64.(fac_mod_J)")
julia_assign("Xcand_J", Xcand)
julia_command("Xcand_J = NamedArray(Xcand_J)")
julia_eval("Xcand_J = Int64.(Xcand_J)")
t_J <- Sys.time()
julia_eval("MDopt(X = X_J, y = y_J, Xcand = Xcand_J, nMod = 5,
p_mod = p_mod_J, fac_mod = fac_mod_J, nFDes = 4, max_int = 3, g = 2, Iter = 20, nStart = 10, top = 10)")
Sys.time() - t_J
# Python con R
library(reticulate)
source_python("MD_Python.py")
X_P <- as.data.frame(X)
Xcand_P <- as.data.frame(Xcand)
fac_mod_P <- as.data.frame(fac_mod)
X_P <- r_to_py(X_P)
y_P <- r_to_py(y)
Xcand_P <- r_to_py(Xcand_P)
p_mod_P <- r_to_py(p_mod)
fac_mod_P <- r_to_py(fac_mod_P)
nMod_P <- r_to_py(5L)
nFDes_P <- r_to_py(4L)
max_int_P <- r_to_py(3L)
g_P <- r_to_py(2L)
Iter_P <- r_to_py(20L)
nStart_P <- r_to_py(25L)
top_P <- r_to_py(10L)
t_P <- Sys.time()
MD_Python(X = X_P, y = y_P, Xcand = Xcand_P, nMod = nMod_P,
p_mod = p_mod_P, fac_mod = fac_mod_P,
nFDes = nFDes_P, max_int = max_int_P,
g = g_P, Iter = Iter_P, nStart = nStart_P, top = top_P)
Sys.time() - t_P
library(BsMD2)
library(BsMD)
setwd("~/ITAM/Tesis/Julia con R/Code/MD-optimality")
data(M96e2)
print(M96e2)
X <- as.matrix(cbind(blk = rep(-1, 8), M96e2[c(25,2,19,12,13,22,7,32), 1:5]))
y <- M96e2[c(25,2,19,12,13,22,7,32), 6]
pp <- BsProb1(X = X[, 2:6], y = y, p = .25, gamma = .4,
max_int = 3, max_fac = 5, top = 32)
p <- pp@p_mod
facs <- pp@fac_mod
Xcand <- as.matrix(cbind(blk = rep(+1, 32), M96e2[, 1:5]))
t <- Sys.time()
e4_R <- BsMD2::MDopt(X = X, y = y, Xcand = Xcand,
nMod = 32, p_mod = p, fac_mod = facs,
g = 0.4, Iter = 10, nStart = 25, top = 5)
Sys.time() - t
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/Valeria/AppData/Local/Programs/Julia-1.6.3/bin")
julia_source("MDopt.jl")
X <- as.matrix(cbind(blk = rep(-1, 8), M96e2[c(25,2,19,12,13,22,7,32), 1:5]))
y <- M96e2[c(25,2,19,12,13,22,7,32), 6]
pp <- BsProb1(X = X[, 2:6], y = y, p = .25, gamma = .4,
max_int = 3, max_fac = 5, top = 32)
p <- pp@p_mod
facs <- pp@fac_mod
Xcand <- as.matrix(cbind(blk = rep(+1, 32), M96e2[, 1:5]))
# Conversiones para los tipos de Julia
X <- as.data.frame(X)
julia_assign("X", X)
julia_assign("y", y)
julia_assign("p_mod", p)
julia_assign("fac_mod", facs)
julia_command("fac_mod = NamedArray(fac_mod)")
julia_eval("fac_mod = Int64.(fac_mod)")
julia_assign("Xcand", Xcand)
julia_command("Xcand = NamedArray(Xcand)")
julia_eval("Xcand = Int64.(Xcand)")
t_J <- Sys.time()
julia_eval("MDopt(X = X, y = y, Xcand = Xcand, nMod = 32, p_mod = p_mod,
fac_mod = fac_mod, nFDes = 4, max_int = 3, g = 0.4, Iter = 10, nStart = 25, top = 5)")
Sys.time() - t_J
# # # Python con R
library(reticulate)
source_python("MD_Python.py")
X_P <- as.data.frame(X)
Xcand_P <- as.data.frame(Xcand)
fac_mod_P <- as.data.frame(facs)
X_P <- r_to_py(X_P)
y_P <- r_to_py(y)
Xcand_P <- r_to_py(Xcand_P)
p_mod_P <- r_to_py(p)
fac_mod_P <- r_to_py(fac_mod_P)
nMod_P <- r_to_py(32L)
nFDes_P <- r_to_py(4L)
max_int_P <- r_to_py(3L)
g_P <- r_to_py(0.4)
Iter_P <- r_to_py(10L)
nStart_P <- r_to_py(25L)
top_P <- r_to_py(5L)
t_P <- Sys.time()
MD_Python(X = X_P, y = y_P, Xcand = Xcand_P, nMod = nMod_P,
p_mod = p_mod_P, fac_mod = fac_mod_P,
nFDes = nFDes_P, max_int = max_int_P,
g = g_P, Iter = Iter_P, nStart = nStart_P, top = top_P)
Sys.time() - t_P
View(e4_R)
e4_R@DEStop
# # # R tesis Paty
library(BsMD2)
setwd("~/ITAM/Tesis/Julia con R/Code/MD-optimality")
X <- as.matrix(BM93e3[1:16,c(1,2,4,6,9)]) #matriz de diseÃ±o inicial
y <- as.vector(BM93e3[1:16,10]) #vector de respuesta
p_mod <- c(0.2356,0.2356,0.2356,0.2356,0.0566) #probabilidad posterior de los 5 modelos
fac_mod <- matrix(c(2,1,1,1,1,3,3,2,2,2,4,4,3,4,3,0,0,0,0,4),nrow=5,
dimnames=list(1:5,c("f1","f2","f3","f4")))
Xcand <- matrix(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,
-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,
-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,
-1,1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,1,-1),
nrow=16,dimnames=list(1:16,c("blk","f1","f2","f3","f4"))
)
t <- Sys.time()
e3_R <- BsMD2::MDopt(X = X, y = y, Xcand = Xcand,
nMod = 5, p_mod = p_mod, fac_mod = fac_mod,
nStart = 25)
Sys.time() - t
# # #  Julia con R
library(JuliaCall)
julia_setup(JULIA_HOME = "C:/Users/Valeria/AppData/Local/Programs/Julia-1.6.3/bin")
julia_source("MDopt.jl")
# Conversiones para los tipos de Julia
X_J <- as.data.frame(X)
julia_assign("X_J", X_J)
julia_assign("y_J", y)
julia_assign("p_mod_J", p_mod)
julia_assign("fac_mod_J", fac_mod)
julia_command("fac_mod_J = NamedArray(fac_mod_J)")
julia_eval("fac_mod_J = Int64.(fac_mod_J)")
julia_assign("Xcand_J", Xcand)
julia_command("Xcand_J = NamedArray(Xcand_J)")
julia_eval("Xcand_J = Int64.(Xcand_J)")
t_J <- Sys.time()
julia_eval("MDopt(X = X_J, y = y_J, Xcand = Xcand_J, nMod = 5,
p_mod = p_mod_J, fac_mod = fac_mod_J, nFDes = 4, max_int = 3, g = 2, Iter = 20, nStart = 10, top = 10)")
Sys.time() - t_J
# Python con R
library(reticulate)
source_python("MD_Python.py")
X_P <- as.data.frame(X)
Xcand_P <- as.data.frame(Xcand)
fac_mod_P <- as.data.frame(fac_mod)
X_P <- r_to_py(X_P)
y_P <- r_to_py(y)
Xcand_P <- r_to_py(Xcand_P)
p_mod_P <- r_to_py(p_mod)
fac_mod_P <- r_to_py(fac_mod_P)
nMod_P <- r_to_py(5L)
nFDes_P <- r_to_py(4L)
max_int_P <- r_to_py(3L)
g_P <- r_to_py(2L)
Iter_P <- r_to_py(20L)
nStart_P <- r_to_py(25L)
top_P <- r_to_py(10L)
t_P <- Sys.time()
MD_Python(X = X_P, y = y_P, Xcand = Xcand_P, nMod = nMod_P,
p_mod = p_mod_P, fac_mod = fac_mod_P,
nFDes = nFDes_P, max_int = max_int_P,
g = g_P, Iter = Iter_P, nStart = nStart_P, top = top_P)
Sys.time() - t_P
# # # R paquete original
library(BsMD)
e3_RO <- BsMD::MD(X = X, y = y, nFac = 4, nBlk = 1, mInt = 3, g = 2,
nMod = 5, p = p_mod, s2 = s2, nf = c(3, 3, 3, 3, 4),
facs = fac_mod, nFDes = 4, Xcand = Xcand, mIter = 20,
nStart = 25, top = 10)
s2 <- c(0.5815, 0.5815, 0.5815, 0.5815, 0.4412)
e3_RO <- BsMD::MD(X = X, y = y, nFac = 4, nBlk = 1, mInt = 3, g = 2,
nMod = 5, p = p_mod, s2 = s2, nf = c(3, 3, 3, 3, 4),
facs = fac_mod, nFDes = 4, Xcand = Xcand, mIter = 20,
nStart = 25, top = 10)
t_RO <- Sys.time()
e3_RO <- BsMD::MD(X = X, y = y, nFac = 4, nBlk = 1, mInt = 3, g = 2,
nMod = 5, p = p_mod, s2 = s2, nf = c(3, 3, 3, 3, 4),
facs = fac_mod, nFDes = 4, Xcand = Xcand, mIter = 20,
nStart = 25, top = 10)
Sys.time() - t_RO
library(BsMD2)
setwd("~/ITAM/Tesis/Julia con R/Code/MD-optimality")
data(M96e2)
print(M96e2)
X <- as.matrix(cbind(blk = rep(-1, 8), M96e2[c(25,2,19,12,13,22,7,32), 1:5]))
y <- M96e2[c(25,2,19,12,13,22,7,32), 6]
pp <- BsProb1(X = X[, 2:6], y = y, p = .25, gamma = .4,
max_int = 3, max_fac = 5, top = 32)
p <- pp@p_mod
facs <- pp@fac_mod
Xcand <- as.matrix(cbind(blk = rep(+1, 32), M96e2[, 1:5]))
t <- Sys.time()
e4_R <- BsMD2::MDopt(X = X, y = y, Xcand = Xcand,
nMod = 32, p_mod = p, fac_mod = facs,
g = 0.4, Iter = 10, nStart = 25, top = 5)
Sys.time() - t
# # # R paquete original
library(BsMD)
reactor8.BsProb <- BsProb(X = X, y = y, blk = 1, mFac = 5, mInt = 3,
p = 0.25, g = 0.40, ng = 1, nMod = 32)
nf <- reactor8.BsProb$nftop
s2 <- reactor8.BsProb$sigtop
t_RO <- Sys.time()
ej4_RO <- BsMD::MD(X = X, y = y, nFac = 5, nBlk = 1, mInt = 3,
g = 0.40, nMod = 32, p = p, s2 = s2, nf = nf,
facs = facs, nFDes = 4, Xcand = Xcand,
mIter = 20, nStart = 25, top = 5)
Sys.time() - t_RO
