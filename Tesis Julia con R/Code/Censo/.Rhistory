numeros <- which(colnames(COVID_IMSS_ABRIL) %in% colnames(cuestionario))
nombres <- colnames(COVID_IMSS_ABRIL)[numeros]
prueba <- cuestionario %>%
mutate(ID_NSS = as.double(ID_NSS)) %>%
full_join(COVID_IMSS_ABRIL, by = c("ID_NSS" = "NSS", nombres))
View(prueba)
prueba <- cuestionario %>%
mutate(ID_NSS = as.double(ID_NSS)) %>%
full_join(COVID_IMSS_ABRIL, by = c("ID_NSS" = "NSS"))
View(prueba)
View(CDMX)
View(anticuerpos)
prueba <- cuestionario %>%
mutate(ID_NSS = as.double(ID_NSS)) %>%
full_join(COVID_IMSS_ABRIL, by = nombres))
prueba <- cuestionario %>%
mutate(ID_NSS = as.double(ID_NSS)) %>%
full_join(COVID_IMSS_ABRIL, by = nombres)
prueba <- cuestionario %>%
mutate(ID_NSS = as.double(ID_NSS)) %>%
full_join(COVID_IMSS_ABRIL, by = c("ID_NSS" = "NSS"))
prueba$CENTRO_DE_TRABAJO
write.csv(prueba, "cuestionario_conEstratos.csv")
getwd()
anticuerpos <- anticuerpos[, 1:which(colnames(anticuerpos) == "ESPICULA_CUANTITATIVA")]
base_completa <- cuestionario %>%
mutate(CVE_ID_ASIGNACION_NSS = as.double(CVE_ID_ASIGNACION_NSS)) %>%
mutate(ID_NSS = as.double(ID_NSS)) %>%
mutate(base_datos = "cuestionario") %>%
inner_join(anticuerpos, by = c("ID_NSS" = "NSS"))
View(base_completa)
write.csv(base_completa, "pruebaPCRsinCuestionario.csv")
knitr::opts_chunk$set(echo = TRUE)
datitt <- read_csv("ITT2019_S40_S99.csv",
col_types = cols(NUM_FOLIO_CEDULA = col_character(),
RAZON_SOCIAL     = col_character(),
RFC              = col_character(),
IMPORTE_CEDULA_DIFERENCIA = col_double()))
library(readr)
library(tidyverse)
library(ggplot2)
library(dplyr)
datitt <- read_csv("ITT2019_S40_S99.csv",
col_types = cols(NUM_FOLIO_CEDULA = col_character(),
RAZON_SOCIAL     = col_character(),
RFC              = col_character(),
IMPORTE_CEDULA_DIFERENCIA = col_double()))
datitt <- read_csv("ITT2019_S40_S99.csv",
col_types = cols(NUM_FOLIO_CEDULA = col_character(),
RAZON_SOCIAL     = col_character(),
RFC              = col_character(),
IMPORTE_CEDULA_DIFERENCIA = col_double()))
datitt <- read_csv("ITT2019_S40_S99.csv",
col_types = cols(NUM_FOLIO_CEDULA = col_character(),
RAZON_SOCIAL     = col_character(),
RFC              = col_character(),
IMPORTE_CEDULA_DIFERENCIA = col_double()))
datitt <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
View(datitt)
datitt <- read_csv("ITT2019_S40_S99.csv",
col_types = cols(NUM_FOLIO_CEDULA = col_character(),
RAZON_SOCIAL     = col_character(),
RFC              = col_character(),
IMPORTE_CEDULA_DIFERENCIA = col_double()))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(reshape2)
datitt <- read_csv("ITT2019_S40_S99.csv",
col_types = cols(NUM_FOLIO_CEDULA = col_character(),
RAZON_SOCIAL     = col_character(),
RFC              = col_character(),
IMPORTE_CEDULA_DIFERENCIA = col_double()))
datitt <- datitt %>%
mutate(DIVISION = str_replace_all(DIVISION, "�", "O"))
dias_promedio <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
dias_promedio2 <- melt(dias_promedio)
ggplot(dias_promedio2, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
comercio <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
filter(str_detect(DIVISION, "COMERCIO")) %>%
group_by(IS_SALARIO_TOPADO, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
comercio <- melt(comercio)
ggplot(comercio, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~GRUPO, ncol = 3, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
servicios <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
filter(str_detect(DIVISION, "SERVICIOS PARA EMPRESAS")) %>%
group_by(IS_SALARIO_TOPADO, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
servicios <- melt(servicios)
ggplot(servicios, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~GRUPO, ncol = 3, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
tranformacion <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
filter(str_detect(DIVISION, "TRANSFORMACION")) %>%
group_by(IS_SALARIO_TOPADO, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
tranformacion <- melt(tranformacion)
ggplot(tranformacion, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~GRUPO, ncol = 5, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social <- melt(razon_social)
ggplot(razon_social, aes(x = DIVISION, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social <- melt(razon_social)
ggplot(razon_social, aes(x = DIVISION, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
labs(x = "División de trabajo", y = "Días de incapacidad")
View(razon_social)
dias_promedio2 <- melt(dias_promedio)
ggplot(dias_promedio2, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_color_manual("Dias promedio", values = c("Salario Topado" = "#222D39",
"Salario No Topado" = "#D1713B"))
labs(x = "División de trabajo",
y = "Días de incapacidad")
?geom_text
dias_promedio2 <- melt(dias_promedio)
ggplot(dias_promedio2, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_color_manual("Dias promedio", values = c("Salario Topado" = "#222D39",
"Salario No Topado" = "#D1713B")) +
labs(x = "División de trabajo",
y = "Días de incapacidad",
fill = "Días promedio")
dias_promedio2 <- melt(dias_promedio)
ggplot(dias_promedio2, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_fill_discrete(name="Dias promedio",
labels=c("Salario No Topado", "Salario Topado"))  +
labs(x = "División de trabajo",
y = "Días de incapacidad")
?facet_wrap
View(dias_promedio)
dias_promedio <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
colnames(dias_promedio) <- c("División", "Grupo",
"Días Promedio(Salario No Topado)",
"Días Promedio(Salario Topado)")
?show
show(dias_promedio)
library(knitr)
kable(dias_promedio, caption = "Días promedio")
t.test(x = dias_promedio$`Días Promedio(Salario Topado)`,
y = dias_promedio$`Días Promedio(Salario No Topado)`,
alternative = "greater", conf.level = 0.95 )
comercio <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
filter(str_detect(DIVISION, "COMERCIO")) %>%
group_by(IS_SALARIO_TOPADO, GRUPO) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("GRUPO"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
comercio <- melt(comercio)
ggplot(comercio, aes(x = GRUPO, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~GRUPO, ncol = 3, scales = "free") +
scale_fill_discrete(name="Dias promedio",
labels=c("Salario No Topado", "Salario Topado"))  +
labs(x = "División de trabajo",
y = "Días de incapacidad")
View(razon_social)
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social2 <- melt(razon_social)
ggplot(razon_social2, aes(x = RAZON_SOCIAL, y = value, fill = variable), xlab="Grupo") +
geom_bar(stat="identity", width = 0.5, position = "dodge") +
facet_wrap(~DIVISION, ncol = 5, scales = "free") +
scale_fill_discrete(name="Dias promedio",
labels=c("Salario No Topado", "Salario Topado"))  +
labs(x = "División de trabajo", y = "Días de incapacidad")
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
razon_social <- datitt %>%
mutate(IS_SALARIO_TOPADO = if_else(IMP_SALARIO_DIARIO == max(IMP_SALARIO_DIARIO),
"Salario Topado", "Salario No Topado")) %>%
filter(DES_RAMO == "ENFERMEDAD GENERAL") %>%
filter(TIP_INCAPACIDAD == 2) %>%
group_by(IS_SALARIO_TOPADO, DIVISION, RAZON_SOCIAL) %>%
summarise(`DIAS PROMEDIO` = mean(`NUM_DIAS_SUBSIDIADOS`)) %>%
pivot_wider(id_cols = c("DIVISION", "RAZON_SOCIAL"), values_from = "DIAS PROMEDIO",
names_from = "IS_SALARIO_TOPADO", names_prefix = "DIAS PROMEDIO")
x <- 8r
x = 8r
help(args)
args(lm)
help(lm)
install.packages('tinytex')
install.packages("knitr")
setwd("~/ITAM/Tesis/Julia con R/Code/Censo")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/ITAM/Tesis/Julia con R/Code/Censo")
data <- read.csv("5mil.csv")
View(data)
ajuste <- lm(INGTRMEN ~ SEXO + EDAD + NIVACAD + HORTRA + ENT_PAIS_TRAB, data)
View(ajuste)
ajuste <- lm(INGTRMEN ~ SEXO + EDAD + NIVACAD + HORTRA + ENT_PAIS_TRAB, data)
summary(ajuste)
ajuste <- lm(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) + HORTRA + as.factor(ENT_PAIS_TRAB), data)
summary(ajuste)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(knitr)
setwd("~/ITAM/Tesis/Julia con R/Code/Censo/Resultados_Julia")
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read.csv)
n = length(temp)
for (i in 1:n){
temp[i] <- str_replace(temp[i], ".csv", "")
}
temp
n = length(myfiles)
for (i in 1:n){
assign(temp[i], myfiles[[i]])
}
for (i in (n/2 + 1):n){
aux <- get(temp[i])
aux <- aux %>%
select(Name, `Coef.`) %>%
rename(Julia = `Coef.`)
assign(temp[i], aux)
}
#Función para unir los resultados de R con los de Julia
union_resultados <- function(vec_strings, fm){
for (i in 1:(k/2)){
aux <- get(vec_strings[i])
ajuste <- lm(fm, aux)
coeficientes <- ajuste$coefficients
res_aux <- get(vec_strings[(k/2) + i])
res_aux <- res_aux %>%
mutate(R = coeficientes)
return (res_aux)
}
}
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
fit5_strings
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
View(`2500mil_fit10`)
fit5_strings
View(res_2500mil_fit10)
View(res_2500mil_fit5)
View(res_500_fit5)
?remove
View(`5mil_fit8`)
#Función para unir los resultados de R con los de Julia
union_resultados <- function(vec_strings, fm){
for (i in 1:(k/2)){
aux <- get(vec_strings[i])
ajuste <- lm(fm, aux)
coeficientes <- ajuste$coefficients
remove(aux)  #Para vaciar un poco de la memoria
res_aux <- get(vec_strings[(k/2) + i])
res_aux <- res_aux %>%
mutate(R = coeficientes)
return (res_aux)
}
}
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
k
k/2 + 1
i = 6
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
fit5_strings[6]
View(res_2500mil_fit5)
i = 7
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(knitr)
setwd("~/ITAM/Tesis/Julia con R/Code/Censo/Resultados_Julia")
temp <- list.files(pattern = "*.csv")
myfiles <- lapply(temp, read.csv)
n = length(temp)
for (i in 1:n){
temp[i] <- str_replace(temp[i], ".csv", "")
}
n = length(myfiles)
for (i in 1:n){
assign(temp[i], myfiles[[i]])
}
for (i in (n/2 + 1):n){
aux <- get(temp[i])
aux <- aux %>%
select(Name, `Coef.`) %>%
rename(Julia = `Coef.`)
assign(temp[i], aux)
}
#Función para unir los resultados de R con los de Julia
union_resultados <- function(vec_strings, fm){
for (i in 1:(k/2)){
aux <- get(vec_strings[i])
ajuste <- lm(fm, aux)
coeficientes <- ajuste$coefficients
remove(aux)  #Para vaciar un poco de la memoria
res_aux <- get(vec_strings[(k/2) + i])
res_aux <- res_aux %>%
mutate(R = coeficientes)
return (res_aux)
}
}
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
memory.limit()
memory.limit(9999999999)
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
memory.size()
memory.limit()
memory.limit(size=56000)
fm_5 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB))
fit5_strings <- temp[str_detect(temp, "fit5")]
k <- length(fit5_strings)
for (i in (k/2 +1):k){
assign(fit5_strings[i], union_resultados(fit5_strings, fm_5))
}
View(res_2500mil_fit5)
vec_strings <- fit5_strings
fm <- fm_5
aux <- get(vec_strings[i])
View(aux)
ajuste <- lm(fm, aux)
vec_strings
i = 1
aux <- get(vec_strings[i])
View(aux)
juste <- lm(fm, aux)
View(juste)
coeficientes <- ajuste$coefficients
ajuste <- juste
coeficientes <- ajuste$coefficients
coeficientes
#Función para unir los resultados de R con los de Julia
union_resultados <- function(vec_strings, fm){
for (i in 1:(k/2)){
aux <- get(vec_strings[i])
ajuste <- lm(fm, aux)
coeficientes <- ajuste$coefficients
remove(aux)  #Para vaciar un poco de la memoria
res_aux <- get(vec_strings[(k/2) + i])
res_aux <- res_aux %>%
mutate(R = coeficientes)
return (res_aux)
}
}
kable(res_500_fit5, caption = "Fit 5, 500 observaciones")
kable(res_2500mil_fit5, caption = "Fit 5, 2.5 millones observaciones")
fm_6 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA))
fit6_strings <- temp[str_detect(temp, "fit6")]
k <- length(fit6_strings)
for (i in (k/2 +1):k){
assign(fit6_strings[i], union_resultados(fit6_strings, fm_6))
}
View(res_2500mil_fit6)
kable(res_500mil_fit6, caption = "Fit 6, 500 mil observaciones")
fm_7 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET))
fit7_strings <- temp[str_detect(temp, "fit7")]
k <- length(fit7_strings)
for (i in (k/2 +1):k){
assign(fit7_strings[i], union_resultados(fit7_strings, fm_7))
}
kable(res_5mil_fit7, caption = "Fit 7, 5 mil observaciones")
fm_8 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO))
fit8_strings <- temp[str_detect(temp, "fit8")]
k <- length(fit8_strings)
for (i in (k/2 +1):k){
assign(fit8_strings[i], union_resultados(fit8_strings, fm_8))
}
kable(res_500mil_fit8, caption = "Fit 8, 500 mil observaciones")
fm_9 <- formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) + as.factor(VACACIONES))
fit9_strings <- temp[str_detect(temp, "fit9")]
k <- length(fit9_strings)
for (i in (k/2 +1):k){
assign(fit9_strings[i], union_resultados(fit9_strings, fm_9))
}
kable(res_50mil_fit9, caption = "Fit 9, 50 mil observaciones")
fm_10 = formula(INGTRMEN ~ as.factor(SEXO) + EDAD + as.factor(NIVACAD) +
HORTRA +   as.factor(ENT_PAIS_TRAB) + as.factor(SITTRA) +
as.factor(ALFABET) + as.factor(AGUINALDO) +
as.factor(VACACIONES) + as.factor(SERVICIO_MEDICO))
fit10_strings <- temp[str_detect(temp, "fit10")]
k <- length(fit10_strings)
for (i in (k/2 +1):k){
assign(fit10_strings[i], union_resultados(fit10_strings, fm_10))
}
kable(res_2500_fit10, caption = "Fit 10, 2.5 millones observaciones")
kable(res_2500mil_fit10, caption = "Fit 10, 2.5 millones observaciones")
View(res_2500mil_fit10)
