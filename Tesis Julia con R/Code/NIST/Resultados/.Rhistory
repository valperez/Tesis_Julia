resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x).
library(polynom)
library(knitr)
library(pracma)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
# Para polinomio de grado = 1
lm_1 <- lm(y ~ x, data = data, x = TRUE)
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
lm.plus <- lm(form, data = data, x = TRUE)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x).
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
lm.plus <- lm(form, data = data, x = TRUE)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
kable(`resultados_grado_ 1`, caption = "Polinomio grado 1")
kable(`resultados_grado_ 2`, caption = "Polinomio grado 2")
kable(`resultados_grado_ 3`, caption = "Polinomio grado 3")
kable(`resultados_grado_ 4`, caption = "Polinomio grado 4")
kable(`resultados_grado_ 5`, caption = "Polinomio grado 5")
kable(`resultados_grado_ 6`, caption = "Polinomio grado 6")
kable(`resultados_grado_ 7`, caption = "Polinomio grado 7")
kable(`resultados_grado_ 8`, caption = "Polinomio grado 8")
kable(`resultados_grado_ 9`, caption = "Polinomio grado 9")
kable(`resultados_grado_ 10`, caption = "Polinomio grado 10")
X <- `X_ 10`
S.svd <- svd(X)
S.d <- S.svd$d
S.d
XtX <- t(X) %*% X
XtX.e <- eigen(XtX)
r <- sqrt(XtX.e$values)
r
#con R
num_cond <- cond(X)
# a mano
S.d <- sort(S.d, decreasing = TRUE)
num_cond_2 <- S.d[1] / S.d[length(S.d)]
# y cerificamos que sean los mismos
num_cond == num_cond_2
num_cond
library(polynom)
library(knitr)
library(pracma)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
# Para polinomio de grado = 1
lm_1 <- lm(y ~ x, data = data, x = TRUE)
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
lm.plus <- lm(form, data = data, x = TRUE)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
View(`resultados_grado_ 7`)
temp <- list.files(pattern = "tiempos_grado_")
temp
temp <- list.files(pattern = "tiempos_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("tiempos_grado_", i), myfiles[[i]])
}
View(`tiempos_grado_ 9`)
rbind(`tiempos_grado_ 1`, `tiempos_grado_ 2`)
View(`X_ 10`)
View(`tiempos_grado_ 10`)
View(`tiempos_grado_ 2`)
df_tiempos <- data.frame()
for (i in 1:10){
df_tiempos <- rbind(df_tiempos, myfils[[i]])
#assign(paste("tiempos_grado_", i), myfiles[[i]])
}
df_tiempos <- data.frame()
for (i in 1:10){
df_tiempos <- rbind(df_tiempos, myfiles[[i]])
#assign(paste("tiempos_grado_", i), myfiles[[i]])
}
View(df_tiempos)
temp <- list.files(pattern = "tiempos_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
df_tiempos <- data.frame()
for (i in 1:10){
df_tiempos <- rbind(df_tiempos, myfiles[[i]])
}
for (k in 1:i){
nombres <- c(nombres, paste0("k_", k))
}
row.names(df_tiempos) <- nombres
temp <- list.files(pattern = "tiempos_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
df_tiempos <- data.frame()
for (i in 1:10){
df_tiempos <- rbind(df_tiempos, myfiles[[i]])
}
nombres <- c()
for (k in 1:i){
nombres <- c(nombres, paste0("k_", k))
}
row.names(df_tiempos) <- nombres
?Sys.time
df_tiempos <- df_tiempos %>%
mutate(R )
library(dplyr)
df_tiempos <- df_tiempos %>%
mutate(R )
vector_vacio <- vector()
vector_vacio <- vector()
df_tiempos <- df_tiempos %>%
mutate(R = vector_vacio)
vector_vacio <- rep(0, nrow(df_tiempo))
vector_vacio <- rep(0, nrow(df_tiempos))
df_tiempos <- df_tiempos %>%
mutate(R = vector_vacio)
# Para polinomio de grado = 1
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
time_1 <- start-end
time_1
typeof(time_1)
# Para polinomio de grado = 1
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
time_vec <- c(start-end)
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE)
end <- Sys.time()
time <- start-end
time_vec <- c(time_vec, time)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
time_vec
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
library(polynom)
library(knitr)
library(pracma)
library(dplyr)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
temp <- list.files(pattern = "tiempos_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
df_tiempos <- data.frame()
for (i in 1:10){
df_tiempos <- rbind(df_tiempos, myfiles[[i]])
}
nombres <- c()
for (k in 1:i){
nombres <- c(nombres, paste0("k_", k))
}
row.names(df_tiempos) <- nombres
# Para polinomio de grado = 1
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
time_vec <- c(start-end)
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE)
end <- Sys.time()
time <- start-end
time_vec <- c(time_vec, time)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
df_tiempos <- df_tiempos %>%
mutate(R = time_vec)
kable(`resultados_grado_ 1`, caption = "Polinomio grado 1")
kable(`resultados_grado_ 2`, caption = "Polinomio grado 2")
kable(`resultados_grado_ 3`, caption = "Polinomio grado 3")
kable(`resultados_grado_ 4`, caption = "Polinomio grado 4")
kable(`resultados_grado_ 5`, caption = "Polinomio grado 5")
kable(`resultados_grado_ 6`, caption = "Polinomio grado 6")
kable(`resultados_grado_ 7`, caption = "Polinomio grado 7")
kable(`resultados_grado_ 8`, caption = "Polinomio grado 8")
kable(`resultados_grado_ 9`, caption = "Polinomio grado 9")
kable(`resultados_grado_ 10`, caption = "Polinomio grado 10")
X <- `X_ 10`
S.svd <- svd(X)
S.d <- S.svd$d
S.d
XtX <- t(X) %*% X
XtX.e <- eigen(XtX)
r <- sqrt(XtX.e$values)
r
#con R
num_cond <- cond(X)
# a mano
S.d <- sort(S.d, decreasing = TRUE)
num_cond_2 <- S.d[1] / S.d[length(S.d)]
# y cerificamos que sean los mismos
num_cond == num_cond_2
View(df_tiempos)
kable(`resultados_grado_ 1`, caption = "Polinomio grado 1")
#kable(`resultados_grado_ 2`, caption = "Polinomio grado 2")
#kable(`resultados_grado_ 3`, caption = "Polinomio grado 3")
#kable(`resultados_grado_ 4`, caption = "Polinomio grado 4")
#kable(`resultados_grado_ 5`, caption = "Polinomio grado 5")
kable(`resultados_grado_ 6`, caption = "Polinomio grado 6")
#kable(`resultados_grado_ 7`, caption = "Polinomio grado 7")
#kable(`resultados_grado_ 8`, caption = "Polinomio grado 8")
#kable(`resultados_grado_ 9`, caption = "Polinomio grado 9")
kable(`resultados_grado_ 10`, caption = "Polinomio grado 10")
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE, tol = 1e-10)
end <- Sys.time()
time <- start-end
time_vec <- c(time_vec, time)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
kable(`resultados_grado_ 1`, caption = "Polinomio grado 1")
#kable(`resultados_grado_ 2`, caption = "Polinomio grado 2")
#kable(`resultados_grado_ 3`, caption = "Polinomio grado 3")
#kable(`resultados_grado_ 4`, caption = "Polinomio grado 4")
#kable(`resultados_grado_ 5`, caption = "Polinomio grado 5")
kable(`resultados_grado_ 6`, caption = "Polinomio grado 6")
#kable(`resultados_grado_ 7`, caption = "Polinomio grado 7")
#kable(`resultados_grado_ 8`, caption = "Polinomio grado 8")
#kable(`resultados_grado_ 9`, caption = "Polinomio grado 9")
kable(`resultados_grado_ 10`, caption = "Polinomio grado 10")
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
library(polynom)
library(knitr)
library(pracma)
library(dplyr)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
temp <- list.files(pattern = "tiempos_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
df_tiempos <- data.frame()
for (i in 1:10){
df_tiempos <- rbind(df_tiempos, myfiles[[i]])
}
nombres <- c()
for (k in 1:i){
nombres <- c(nombres, paste0("k_", k))
}
row.names(df_tiempos) <- nombres
# Para polinomio de grado = 1
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
time_vec <- c(start-end)
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE, tol = 1e-10)
end <- Sys.time()
time <- start-end
time_vec <- c(time_vec, time)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
df_tiempos <- df_tiempos %>%
mutate(R = time_vec)
kable(`resultados_grado_ 1`, caption = "Polinomio grado 1")
#kable(`resultados_grado_ 2`, caption = "Polinomio grado 2")
#kable(`resultados_grado_ 3`, caption = "Polinomio grado 3")
#kable(`resultados_grado_ 4`, caption = "Polinomio grado 4")
#kable(`resultados_grado_ 5`, caption = "Polinomio grado 5")
kable(`resultados_grado_ 6`, caption = "Polinomio grado 6")
#kable(`resultados_grado_ 7`, caption = "Polinomio grado 7")
#kable(`resultados_grado_ 8`, caption = "Polinomio grado 8")
#kable(`resultados_grado_ 9`, caption = "Polinomio grado 9")
kable(`resultados_grado_ 10`, caption = "Polinomio grado 10")
X <- `X_ 10`
S.svd <- svd(X)
S.d <- S.svd$d
S.d
XtX <- t(X) %*% X
XtX.e <- eigen(XtX)
r <- sqrt(XtX.e$values)
r
#con R
num_cond <- cond(X)
# a mano
S.d <- sort(S.d, decreasing = TRUE)
num_cond_2 <- S.d[1] / S.d[length(S.d)]
# y cerificamos que sean los mismos
num_cond == num_cond_2
View(`resultados_grado_ 10`)
df_tiempos <- df_tiempos %>%
mutate(R = time_vec)
kable(df_tiempos, caption = "Tiempos de ejecución de los métodos")
# Para polinomio de grado = 1
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
time_vec <- c(end - start)
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
#Ejecutamos el modelo
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE, tol = 1e-10)
end <- Sys.time()
time <- end - start
time_vec <- c(time_vec, time)
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
