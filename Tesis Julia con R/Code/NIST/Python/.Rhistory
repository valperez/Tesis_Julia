for (i in 1:length(myfiles)){
if (i %% runs == 1){
aux <- data.frame(myfiles[[i]])
} else {
aux <- rbind(aux, myfiles[[i]])
}
if (i %% runs == 0){
print(i)
j <- i/runs
assign(paste("tiempos_grado_", j), aux)
}
}
View(`tiempos_grado_ 1`)
View(`tiempos_grado_ 10`)
View(`tiempos_grado_ 2`)
View(`tiempos_grado_ 2`)
?colMeans
colMeans(`tiempos_grado_ 1`)
aux
row.names(aux) <- c(1, 2, 3, 4, 5, "mean")
row.names(aux) <- c(1, 2, 3, 4, 5)
aux
for (i in 1:length(myfiles)){
if (i %% runs == 1){
aux <- data.frame(myfiles[[i]])
} else {
aux <- rbind(aux, myfiles[[i]])
}
if (i %% runs == 0){
aux <- rbind(aux, colMeans(aux))
row.names(aux) <- c("1", "2", "3", "4", "5", "mean")
j <- i/runs
assign(paste("tiempos_grado_", j), aux)
}
}
View(`tiempos_grado_ 9`)
?get
for (i in 1:length(myfiles)){
if (i %% runs == 1){
aux <- data.frame(myfiles[[i]])
} else {
aux <- rbind(aux, myfiles[[i]])
}
if (i %% runs == 0){
aux <- rbind(aux, colMeans(aux))
row.names(aux) <- c("1", "2", "3", "4", "5", "mean")
j <- i/runs
assign(paste("tiempos_grado_", j), aux)
write.csv(get(paste("tiempos_grado_", j)),
paste("tiempos_grado_", j, "_condensado.csv"))
}
}
View(`tiempos_grado_ 1`)
View(`tiempos_grado_ 1`)
View(`tiempos_grado_ 10`)
?data.frame
?matrix
View(`tiempos_grado_ 1`)
df_means <- data.frame(matrix(data = NA, nrow = 10, ncol = 4))
aux <- get(paste("tiempos_grado_", j))
j
j <- 1
aux <- get(paste("tiempos_grado_", j))
View(aux)
aux[-1, :]
aux[-1, :]
aux[-1, ]
tail(aux)
tail(aux, 1)
df_means <- data.frame(matrix(data = NA, nrow = 10, ncol = 4))
for (j in 1:j_top){
aux <- get(paste("tiempos_grado_", j))
aux <- tail(aux, 1)
df_means[j, ] <- aux
}
j_top <- 10
df_means <- data.frame(matrix(data = NA, nrow = 10, ncol = 4))
for (j in 1:j_top){
aux <- get(paste("tiempos_grado_", j))
aux <- tail(aux, 1)
df_means[j, ] <- aux
}
View(df_means)
View(`tiempos_grado_ 1`)
View(`tiempos_grado_ 10`)
colnames(df_means) <- colnames(tiempos_grado_1)
colnames(df_means) <- colnames(`tiempos_grado_ 1`)
View(df_means)
write.csv(df_means, "tiempos_totales_condensado.csv")
knitr::opts_chunk$set(echo = TRUE)
library(polynom)
library(knitr)
library(pracma)
library(dplyr)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
# Python
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Python")
arc_python <- list.files(pattern = "res_python")
files_pyt <- lapply(arc_python, read.csv)
files_pyt[[11]] <- files_pyt[[2]]
files_pyt <- files_pyt[-2]
for (i in 1:10){
assign(paste("res_python_gr_", i), files_pyt[[i]])
}
myfiles
temp
temp <- list.files(pattern = "tiempos_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
temp
runs <- seq(1, 5)
tiempos_r <- data.frame(matrix(ncol = 6, nrow = 10))
nombres <- c()
for (i in runs){
nombres <- c(nombres, paste("Tiempo_", i))
}
colnames(tiempos_r) <- c("Grado", nombres)
# Para polinomio de grado = 1
time_vec <- c(1)
for (i in runs){
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
time_vec <- c(time_vec, end - start)
}
tiempos_r[1, ] <- time_vec
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
# Python
`resultados_grado_ 1`$Python <- `res_python_gr_ 1`$Python
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
time_vec <- c(i)
#Ejecutamos el modelo
for (j in runs){
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE,
tol = 1e-10)
end <- Sys.time()
time_vec <- c(time_vec, end - start)
}
tiempos_r[i, ] <- time_vec
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
python_aux <- get(paste("res_python_gr_", i))
resultados_aux$Python <- python_aux$Python
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
View(`resultados_grado_ 9`)
df_tiempos <- df_tiempos %>%
mutate(R = time_vec)
View(tiempos_r)
rowMeans(tiempos_r)
tiempos_r["Promedio"] <- rowMeans(tiempos_r)
?write.csv
write.csv(tiempos_r, "tiempos_NIST_R_Condensado.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
write.csv(tiempos_r, "tiempos_NIST_R_Condensado.csv")
tiempos_r
write.csv(tiempos_r, "C:/Users/Valeria/Documents/ITAM/Tesis/Julia con R/Code/NIST/Resultados/tiempos_NIST_R_Condensado.csv")
tiempos_r["Promedio"] <- rowMeans(tiempos_r[2:, ])
tiempos_r["Promedio"] <- rowMeans(tiempos_r[, 2: ncol(tiempos_r)])
View(tiempos_r)
library(polynom)
library(knitr)
library(pracma)
library(dplyr)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
# Python
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Python")
arc_python <- list.files(pattern = "res_python")
files_pyt <- lapply(arc_python, read.csv)
files_pyt[[11]] <- files_pyt[[2]]
files_pyt <- files_pyt[-2]
for (i in 1:10){
assign(paste("res_python_gr_", i), files_pyt[[i]])
}
runs <- seq(1, 5)
tiempos_r <- data.frame(matrix(ncol = 6, nrow = 10))
nombres <- c()
for (i in runs){
nombres <- c(nombres, paste("Tiempo_", i))
}
colnames(tiempos_r) <- c("Grado", nombres)
# Para polinomio de grado = 1
time_vec <- c(1)
for (i in runs){
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
time_vec <- c(time_vec, end - start)
}
tiempos_r[1, ] <- time_vec
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
# Python
`resultados_grado_ 1`$Python <- `res_python_gr_ 1`$Python
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
time_vec <- c(i)
#Ejecutamos el modelo
for (j in runs){
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE,
tol = 1e-10)
end <- Sys.time()
time_vec <- c(time_vec, end - start)
}
tiempos_r[i, ] <- time_vec
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
python_aux <- get(paste("res_python_gr_", i))
resultados_aux$Python <- python_aux$Python
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
tiempos_r["Promedio"] <- rowMeans(tiempos_r[, 2: ncol(tiempos_r)])
write.csv(tiempos_r, "C:/Users/Valeria/Documents/ITAM/Tesis/Julia con R/Code/NIST/Resultados/tiempos_NIST_R_Condensado.csv")
knitr::opts_chunk$set(echo = TRUE)
library(polynom)
library(knitr)
library(pracma)
library(dplyr)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
# Python
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Python")
arc_python <- list.files(pattern = "res_python")
files_pyt <- lapply(arc_python, read.csv)
files_pyt[[11]] <- files_pyt[[2]]
files_pyt <- files_pyt[-2]
for (i in 1:10){
assign(paste("res_python_gr_", i), files_pyt[[i]])
}
temp <- list.files(pattern = "tiempos_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
# Falta modificar esto por el dataframe que tenga el promedio de tiempos
df_tiempos <- data.frame()
for (i in 1:10){
df_tiempos <- rbind(df_tiempos, myfiles[[i]])
}
nombres <- c()
for (k in 1:i){
nombres <- c(nombres, paste0("k_", k))
}
row.names(df_tiempos) <- nombres
runs <- seq(1, 5)
tiempos_r <- data.frame(matrix(ncol = 6, nrow = 10))
nombres <- c()
for (i in runs){
nombres <- c(nombres, paste("Tiempo_", i))
}
colnames(tiempos_r) <- c("Grado", nombres)
# Para polinomio de grado = 1
time_vec <- c(1)
for (i in runs){
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
time_vec <- c(time_vec, end - start)
}
tiempos_r[1, ] <- time_vec
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
# Python
`resultados_grado_ 1`$Python <- `res_python_gr_ 1`$Python
# Para polinomios de grado > 1
for (i in 2:10){
#Hacemos el modelo
model <- paste("y ~ x", paste("+ I(x^", 2:i, ")", sep='', collapse=''))
# Lo convertimos en formula
form <- formula(model)
time_vec <- c(i)
#Ejecutamos el modelo
for (j in runs){
start <- Sys.time()
lm.plus <- lm(form, data = data, x = TRUE,
tol = 1e-10)
end <- Sys.time()
time_vec <- c(time_vec, end - start)
}
tiempos_r[i, ] <- time_vec
# Guardo el df correspondiente a un auxiliar
resultados_aux <- get(paste("resultados_grado_", i))
# para unirle los coeficientes
resultados_aux$R <- lm.plus$coefficients
python_aux <- get(paste("res_python_gr_", i))
resultados_aux$Python <- python_aux$Python
nombres <- c("b0")
# Para el nombre de los renglones
for (k in 1:i){
nombres <- c(nombres, paste0("b", k))
}
row.names(resultados_aux) <- nombres
#Finalmente, hago el df final
assign(paste("resultados_grado_", i), resultados_aux)
assign(paste("X_", i), lm.plus$x)
}
knitr::opts_chunk$set(echo = TRUE)
library(polynom)
library(knitr)
library(pracma)
library(dplyr)
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
data <- read.csv("filip_data.csv")
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Resultados")
temp <- list.files(pattern = "resultados_grado_")
myfiles <- lapply(temp, read.csv)
myfiles[[11]] <- myfiles[[2]]
myfiles <- myfiles[-2]
for (i in 1:10){
assign(paste("resultados_grado_", i), myfiles[[i]])
}
# Python
setwd("~/ITAM/Tesis/Julia con R/Code/NIST/Python")
arc_python <- list.files(pattern = "res_python")
files_pyt <- lapply(arc_python, read.csv)
files_pyt[[11]] <- files_pyt[[2]]
files_pyt <- files_pyt[-2]
for (i in 1:10){
assign(paste("res_python_gr_", i), files_pyt[[i]])
}
runs <- seq(1, 5)
tiempos_r <- data.frame(matrix(ncol = 6, nrow = 10))
nombres <- c()
for (i in runs){
nombres <- c(nombres, paste("Tiempo_", i))
}
colnames(tiempos_r) <- c("Grado", nombres)
# Para polinomio de grado = 1
time_vec <- c(1)
for (i in runs){
start <- Sys.time()
lm_1 <- lm(y ~ x, data = data, x = TRUE)
end <- Sys.time()
time_vec <- c(time_vec, end - start)
}
tiempos_r[1, ] <- time_vec
`resultados_grado_ 1`$R <- lm_1$coefficients
row.names(`resultados_grado_ 1`) <- c("b0", "b1")
X_1 <- lm_1$x
# Python
`resultados_grado_ 1`$Python <- `res_python_gr_ 1`$Python
time_vec
tiempos_r
setwd("~/ITAM/Tesis/Julia con R/Code/NIST")
setwd("~/GitHub/Tesis_Julia/Tesis Julia con R/Code/NIST")
# Lectura de tiempos de R
r_data <- read.csv("tiempos_NISt_R_Condensado.csv")
View(r_data)
r_data <- r_data[:, "Promedio"]
r_data <- r_data[, "Promedio"]
r_data
# Lectura de tiempos de R
r_data <- read.csv("tiempos_NISt_R_Condensado.csv")
View(r_data)
r_data <- r_data[, c("Grado", Promedio")]
r_data <- r_data[, c("Grado", "Promedio")]
# Lectura de tiempos de R
r_data <- read.csv("tiempos_NISt_R_Condensado.csv")
r_data <- r_data[, c("Grado", "Promedio")]
# Lectura de tiempos de Julia
setwd("~/GitHub/Tesis_Julia/Tesis Julia con R/Code/NIST/Resultados_Julia")
temp <- list.files(pattern = "tiempos_grado")
myfiles <- lapply(temp, read.csv)
myfiles
myfiles[[1]][mean, ]
myfiles[[1]]["mean", ]
myfiles[[1]]
myfiles[[1]][which(X == "mean")]
myfiles[[1]][which(X == "mean"), ]
aux <- myfiles[[1]]
aux[which(X == "mean"), ]
aux[which(aux$X == "mean"), ]
len(myfiles)
length(myfiles)
julia_data <- data.frame(matrix(NA, nrow = 10, ncol = 4))
for (i in 1:length(myfiles)){
aux <- myfiles[[i]]
julia_data[i, ] <- aux[which(aux$X == "mean")]
}
julia_data
i <- 1
aux <- myfiles[[i]]
julia_data[i, ] <- aux[which(aux$X == "mean")]
aux[which(aux$X == "mean")]
for (i in 1:length(myfiles)){
aux <- myfiles[[i]]
julia_data[i, ] <- aux[which(aux$X == "mean"), ]
}
View(julia_data)
julia_data <- data.frame(matrix(NA, nrow = 10, ncol = 5))
julia_data <- data.frame(matrix(NA, nrow = 10, ncol = 4))
for (i in 1:length(myfiles)){
aux <- myfiles[[i]]
julia_data[i, ] <- aux[which(aux$X == "mean"), 2:]
}
for (i in 1:length(myfiles)){
aux <- myfiles[[i]]
julia_data[i, ] <- aux[which(aux$X == "mean"), 2:4]
}
colnames(myfiles[[1]])
nombres_columnas <- colnames(myfiles[[1]])
nombres_columnas
nombres_columnas[2:]
nombres_columnas[2:len(nombres_columnas)]
nombres_columnas[2:length(nombres_columnas)]
nombres_columnas <- colnames(myfiles[[1]])
nombres_columnas <- nombres_columnas[2:length(nombres_columnas)]
colnames(julia_data) <- nombres_columnas
View(julia_data)
# Lectura de tiempos Julia
setwd("~/GitHub/Tesis_Julia/Tesis Julia con R/Code/NIST/Python")
python_data <- read.csv("tiempos_NISt_Python.csv")
View(python_data)
python_data <- python_data[, c("Grado", "Promedio")]
# Concatenación de todo
tiempos_df <- r_data[, "Grado"]
tiempos_df
colnames(python_data) <- c("Grado", "Python")
colnames(r_data) <- c("Grado", "R")
# Concatenación de todo
tiempos_df <- cbind(r_data[, "Grado"],
julia_data,
r_data[, "R"],
python_data[, "Python"])
View(tiempos_df)
?cbind
colnames(tiempos_df) <- c("Grado",
colnames(julia_data),
"R", "Python")
View(r_data)
View(julia_data)
myfiles[[1]]
i <- 1
aux <- myfiles[[i]]
aux[which(aux$X == "mean"), 2:4]
aux[which(aux$X == "mean"), 2:5]
julia_data <- data.frame(matrix(NA, nrow = 10, ncol = 4))
for (i in 1:length(myfiles)){
aux <- myfiles[[i]]
julia_data[i, ] <- aux[which(aux$X == "mean"), 2:5]
}
nombres_columnas <- colnames(myfiles[[1]])
nombres_columnas <- nombres_columnas[2:length(nombres_columnas)]
colnames(julia_data) <- nombres_columnas
# Concatenación de todo
tiempos_df <- cbind(r_data[, "Grado"],
julia_data,
r_data[, "R"],
python_data[, "Python"])
colnames(tiempos_df) <- c("Grado",
colnames(julia_data),
"R", "Python")
